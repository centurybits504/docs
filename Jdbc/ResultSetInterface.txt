ResultSet Interface:
ResultSet interface present in com.mysql.jdbc.* package.
A table of data representing a database result set, which is usually generated by executing a statement that queries the database.
A ResultSet object maintains a cursor pointing to its current row of data. 
Initially the cursor is positioned before the first row. 
The next method moves the cursor to the next row, and because it returns false when there are no more rows in the ResultSet object, it can be used in a while loop to iterate through the result set.
A default ResultSet object is not updatable and has a cursor that moves forward only.
Thus, you can iterate through it only once and only from the first row to the last row.
It is possible to produce ResultSet objects that are scrollable and/or updatable.


All Superinterfaces:
    AutoCloseable, Wrapper 
All Known Subinterfaces:
    CachedRowSet, FilteredRowSet, JdbcRowSet, JoinRowSet, RowSet, SyncResolver, WebRowSet 

public interface ResultSet extends Wrapper, AutoCloseable{
}	

Classification Of result sets in Jdbc:
1)On the basis of result set "Concurancy". Further divided into 2 types.
	i)Read only result set
	ii)Updatable result set
2)On the basis of result set "Cursur Movements".  Further divided into 2 types.
	i)Forward only result set
	ii)Scrollable result set

Read only result set:
	It is a result set, which allow users to read the data only.
	To refer this result set, we have to a use constant from ResultSet interface.
		public static final int CONCUR_READ_ONLY;
updatable result set:
	It is a result set, which allow users to perform some updations on it's(result) content.
	To refer this result set, we have to a use constant from ResultSet interface.
	public 	static final int CONCUR_UPDATABLE;
Forward only result set:
	It is a result set, which allow users to iterate the data in forward direction only.
	To refer this result set, we have to a use constant from ResultSet interface.
	public static final int TYPE_FORWARD_ONLY;
Scrollable result set:
	It is a result set, which allow users to iterate the data in both forward and backward directions.
	Further there are 2 types of Scrollable result sets.
	1)Scroll Sensitive Result Sets: 
		It is a ResultSet object, which allows the later updation from database automatically after creating it.
		To refer this result set, we have to a use constant from ResultSet interface.
		public static final int TYPE_SCROLL_SENSITIVE;	
	2)Scroll In Sensitive Result Sets:
		It is a ResultSet object, which will not allows later updations from database after creating it.
		To refer this result set, we have to a use constant from ResultSet interface.
		public static final int TYPE_SCROLL_INSENSITIVE;

Note: The default ResultSet type's in jdbc application is Read only & 	Forward only.


In our example program(ResultSetExample) we are retrieving the rows one-by-one in forward direction using rs_1.next() method.
Suppose if we want to retrieve rows in reverse direction, we have previous() method from ResultSet interface 
but this won't work because, bydefault ResultSet type's in jdbc application is "CONCUR_READ_ONLY" &	"TYPE_FORWARD_ONLY".

In jdbc application we're able to specify the following types of result set combination to any particular ResultSet.
	1) CONCUR_READ_ONLY, TYPE_FORWARD_ONLY
	2) CONCUR_READ_ONLY, TYPE_SCROLL_SENSITIVE
	3) CONCUR_READ_ONLY, TYPE_SCROLL_INSENSITIVE
	4) CONCUR_UPDATABLE, TYPE_FORWARD_ONLY
	5) CONCUR_UPDATABLE, TYPE_SCROLL_SENSITIVE
	6) CONCUR_UPDATABLE, TYPE_SCROLL_INSENSITIVE
	
Usage of ResultSet objects:
	/*Statement interface method*/
	Statement stmt = connection.createStatement(constant1,constant2);
	
	/*PreparedStatement interface method*/
	PreparedStatement pstmt = connection.preparedStatement(String sql,constant1,constant2);
	
	Here "constant1" may take any of the following:
		ResultSet.TYPE_FORWARD_ONLY
		ResultSet.TYPE_SCROLL_SENSITIVE
		ResultSet.TYPE_SCROLL_INSENSITIVE
	Here "constant2" may take take any of the following:	
		ResultSet.CONCUR_READ_ONLY
		ResultSet.CONCUR_UPDATABLE

		

Methods:
boolean 	absolute(int row)
Moves the cursor to the given row number in this ResultSet object.
void 	afterLast()
Moves the cursor to the end of this ResultSet object, just after the last row.
void 	beforeFirst()
Moves the cursor to the front of this ResultSet object, just before the first row.
void 	cancelRowUpdates()
Cancels the updates made to the current row in this ResultSet object.
void 	clearWarnings()
Clears all warnings reported on this ResultSet object.
void 	close()
Releases this ResultSet object's database and JDBC resources immediately instead of waiting for this to happen when it is automatically closed.
void 	deleteRow()
Deletes the current row from this ResultSet object and from the underlying database.
int 	findColumn(String columnLabel)
Maps the given ResultSet column label to its ResultSet column index.
boolean 	first()
Moves the cursor to the first row in this ResultSet object.
Array 	getArray(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as an Array object in the Java programming language.
Array 	getArray(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as an Array object in the Java programming language.
InputStream 	getAsciiStream(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as a stream of ASCII characters.
InputStream 	getAsciiStream(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as a stream of ASCII characters.
BigDecimal 	getBigDecimal(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as a java.math.BigDecimal with full precision.
BigDecimal 	getBigDecimal(int columnIndex, int scale)
Deprecated.  
BigDecimal 	getBigDecimal(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as a java.math.BigDecimal with full precision.
BigDecimal 	getBigDecimal(String columnLabel, int scale)
Deprecated.  
InputStream 	getBinaryStream(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as a stream of uninterpreted bytes.
InputStream 	getBinaryStream(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as a stream of uninterpreted bytes.
Blob 	getBlob(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as a Blob object in the Java programming language.
Blob 	getBlob(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as a Blob object in the Java programming language.
boolean 	getBoolean(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as a boolean in the Java programming language.
boolean 	getBoolean(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as a boolean in the Java programming language.
byte 	getByte(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as a byte in the Java programming language.
byte 	getByte(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as a byte in the Java programming language.
byte[] 	getBytes(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as a byte array in the Java programming language.
byte[] 	getBytes(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as a byte array in the Java programming language.
Reader 	getCharacterStream(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as a java.io.Reader object.
Reader 	getCharacterStream(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as a java.io.Reader object.
Clob 	getClob(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as a Clob object in the Java programming language.
Clob 	getClob(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as a Clob object in the Java programming language.
int 	getConcurrency()
Retrieves the concurrency mode of this ResultSet object.
String 	getCursorName()
Retrieves the name of the SQL cursor used by this ResultSet object.
Date 	getDate(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language.
Date 	getDate(int columnIndex, Calendar cal)
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language.
Date 	getDate(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language.
Date 	getDate(String columnLabel, Calendar cal)
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Date object in the Java programming language.
double 	getDouble(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as a double in the Java programming language.
double 	getDouble(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as a double in the Java programming language.
int 	getFetchDirection()
Retrieves the fetch direction for this ResultSet object.
int 	getFetchSize()
Retrieves the fetch size for this ResultSet object.
float 	getFloat(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as a float in the Java programming language.
float 	getFloat(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as a float in the Java programming language.
int 	getHoldability()
Retrieves the holdability of this ResultSet object
int 	getInt(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as an int in the Java programming language.
int 	getInt(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as an int in the Java programming language.
long 	getLong(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as a long in the Java programming language.
long 	getLong(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as a long in the Java programming language.
ResultSetMetaData 	getMetaData()
Retrieves the number, types and properties of this ResultSet object's columns.
Reader 	getNCharacterStream(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as a java.io.Reader object.
Reader 	getNCharacterStream(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as a java.io.Reader object.
NClob 	getNClob(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as a NClob object in the Java programming language.
NClob 	getNClob(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as a NClob object in the Java programming language.
String 	getNString(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as a String in the Java programming language.
String 	getNString(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as a String in the Java programming language.
Object 	getObject(int columnIndex)
Gets the value of the designated column in the current row of this ResultSet object as an Object in the Java programming language.
<T> T 	getObject(int columnIndex, Class<T> type)
Retrieves the value of the designated column in the current row of this ResultSet object and will convert from the SQL type of the column to the requested Java data type, if the conversion is supported.
Object 	getObject(int columnIndex, Map<String,Class<?>> map)
Retrieves the value of the designated column in the current row of this ResultSet object as an Object in the Java programming language.
Object 	getObject(String columnLabel)
Gets the value of the designated column in the current row of this ResultSet object as an Object in the Java programming language.
<T> T 	getObject(String columnLabel, Class<T> type)
Retrieves the value of the designated column in the current row of this ResultSet object and will convert from the SQL type of the column to the requested Java data type, if the conversion is supported.
Object 	getObject(String columnLabel, Map<String,Class<?>> map)
Retrieves the value of the designated column in the current row of this ResultSet object as an Object in the Java programming language.
Ref 	getRef(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as a Ref object in the Java programming language.
Ref 	getRef(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as a Ref object in the Java programming language.
int 	getRow()
Retrieves the current row number.
RowId 	getRowId(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.RowId object in the Java programming language.
RowId 	getRowId(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.RowId object in the Java programming language.
short 	getShort(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as a short in the Java programming language.
short 	getShort(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as a short in the Java programming language.
SQLXML 	getSQLXML(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet as a java.sql.SQLXML object in the Java programming language.
SQLXML 	getSQLXML(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet as a java.sql.SQLXML object in the Java programming language.
Statement 	getStatement()
Retrieves the Statement object that produced this ResultSet object.
String 	getString(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as a String in the Java programming language.
String 	getString(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as a String in the Java programming language.
Time 	getTime(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language.
Time 	getTime(int columnIndex, Calendar cal)
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language.
Time 	getTime(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language.
Time 	getTime(String columnLabel, Calendar cal)
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Time object in the Java programming language.
Timestamp 	getTimestamp(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language.
Timestamp 	getTimestamp(int columnIndex, Calendar cal)
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language.
Timestamp 	getTimestamp(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language.
Timestamp 	getTimestamp(String columnLabel, Calendar cal)
Retrieves the value of the designated column in the current row of this ResultSet object as a java.sql.Timestamp object in the Java programming language.
int 	getType()
Retrieves the type of this ResultSet object.
InputStream 	getUnicodeStream(int columnIndex)
Deprecated. 
use getCharacterStream in place of getUnicodeStream
InputStream 	getUnicodeStream(String columnLabel)
Deprecated. 
use getCharacterStream instead
URL 	getURL(int columnIndex)
Retrieves the value of the designated column in the current row of this ResultSet object as a java.net.URL object in the Java programming language.
URL 	getURL(String columnLabel)
Retrieves the value of the designated column in the current row of this ResultSet object as a java.net.URL object in the Java programming language.
SQLWarning 	getWarnings()
Retrieves the first warning reported by calls on this ResultSet object.
void 	insertRow()
Inserts the contents of the insert row into this ResultSet object and into the database.
boolean 	isAfterLast()
Retrieves whether the cursor is after the last row in this ResultSet object.
boolean 	isBeforeFirst()
Retrieves whether the cursor is before the first row in this ResultSet object.
boolean 	isClosed()
Retrieves whether this ResultSet object has been closed.
boolean 	isFirst()
Retrieves whether the cursor is on the first row of this ResultSet object.
boolean 	isLast()
Retrieves whether the cursor is on the last row of this ResultSet object.
boolean 	last()
Moves the cursor to the last row in this ResultSet object.
void 	moveToCurrentRow()
Moves the cursor to the remembered cursor position, usually the current row.
void 	moveToInsertRow()
Moves the cursor to the insert row.
boolean 	next()
Moves the cursor froward one row from its current position.
boolean 	previous()
Moves the cursor to the previous row in this ResultSet object.
void 	refreshRow()
Refreshes the current row with its most recent value in the database.
boolean 	relative(int rows)
Moves the cursor a relative number of rows, either positive or negative.
boolean 	rowDeleted()
Retrieves whether a row has been deleted.
boolean 	rowInserted()
Retrieves whether the current row has had an insertion.
boolean 	rowUpdated()
Retrieves whether the current row has been updated.
void 	setFetchDirection(int direction)
Gives a hint as to the direction in which the rows in this ResultSet object will be processed.
void 	setFetchSize(int rows)
Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when more rows are needed for this ResultSet object.
void 	updateArray(int columnIndex, Array x)
Updates the designated column with a java.sql.Array value.
void 	updateArray(String columnLabel, Array x)
Updates the designated column with a java.sql.Array value.
void 	updateAsciiStream(int columnIndex, InputStream x)
Updates the designated column with an ascii stream value.
void 	updateAsciiStream(int columnIndex, InputStream x, int length)
Updates the designated column with an ascii stream value, which will have the specified number of bytes.
void 	updateAsciiStream(int columnIndex, InputStream x, long length)
Updates the designated column with an ascii stream value, which will have the specified number of bytes.
void 	updateAsciiStream(String columnLabel, InputStream x)
Updates the designated column with an ascii stream value.
void 	updateAsciiStream(String columnLabel, InputStream x, int length)
Updates the designated column with an ascii stream value, which will have the specified number of bytes.
void 	updateAsciiStream(String columnLabel, InputStream x, long length)
Updates the designated column with an ascii stream value, which will have the specified number of bytes.
void 	updateBigDecimal(int columnIndex, BigDecimal x)
Updates the designated column with a java.math.BigDecimal value.
void 	updateBigDecimal(String columnLabel, BigDecimal x)
Updates the designated column with a java.sql.BigDecimal value.
void 	updateBinaryStream(int columnIndex, InputStream x)
Updates the designated column with a binary stream value.
void 	updateBinaryStream(int columnIndex, InputStream x, int length)
Updates the designated column with a binary stream value, which will have the specified number of bytes.
void 	updateBinaryStream(int columnIndex, InputStream x, long length)
Updates the designated column with a binary stream value, which will have the specified number of bytes.
void 	updateBinaryStream(String columnLabel, InputStream x)
Updates the designated column with a binary stream value.
void 	updateBinaryStream(String columnLabel, InputStream x, int length)
Updates the designated column with a binary stream value, which will have the specified number of bytes.
void 	updateBinaryStream(String columnLabel, InputStream x, long length)
Updates the designated column with a binary stream value, which will have the specified number of bytes.
void 	updateBlob(int columnIndex, Blob x)
Updates the designated column with a java.sql.Blob value.
void 	updateBlob(int columnIndex, InputStream inputStream)
Updates the designated column using the given input stream.
void 	updateBlob(int columnIndex, InputStream inputStream, long length)
Updates the designated column using the given input stream, which will have the specified number of bytes.
void 	updateBlob(String columnLabel, Blob x)
Updates the designated column with a java.sql.Blob value.
void 	updateBlob(String columnLabel, InputStream inputStream)
Updates the designated column using the given input stream.
void 	updateBlob(String columnLabel, InputStream inputStream, long length)
Updates the designated column using the given input stream, which will have the specified number of bytes.
void 	updateBoolean(int columnIndex, boolean x)
Updates the designated column with a boolean value.
void 	updateBoolean(String columnLabel, boolean x)
Updates the designated column with a boolean value.
void 	updateByte(int columnIndex, byte x)
Updates the designated column with a byte value.
void 	updateByte(String columnLabel, byte x)
Updates the designated column with a byte value.
void 	updateBytes(int columnIndex, byte[] x)
Updates the designated column with a byte array value.
void 	updateBytes(String columnLabel, byte[] x)
Updates the designated column with a byte array value.
void 	updateCharacterStream(int columnIndex, Reader x)
Updates the designated column with a character stream value.
void 	updateCharacterStream(int columnIndex, Reader x, int length)
Updates the designated column with a character stream value, which will have the specified number of bytes.
void 	updateCharacterStream(int columnIndex, Reader x, long length)
Updates the designated column with a character stream value, which will have the specified number of bytes.
void 	updateCharacterStream(String columnLabel, Reader reader)
Updates the designated column with a character stream value.
void 	updateCharacterStream(String columnLabel, Reader reader, int length)
Updates the designated column with a character stream value, which will have the specified number of bytes.
void 	updateCharacterStream(String columnLabel, Reader reader, long length)
Updates the designated column with a character stream value, which will have the specified number of bytes.
void 	updateClob(int columnIndex, Clob x)
Updates the designated column with a java.sql.Clob value.
void 	updateClob(int columnIndex, Reader reader)
Updates the designated column using the given Reader object.
void 	updateClob(int columnIndex, Reader reader, long length)
Updates the designated column using the given Reader object, which is the given number of characters long.
void 	updateClob(String columnLabel, Clob x)
Updates the designated column with a java.sql.Clob value.
void 	updateClob(String columnLabel, Reader reader)
Updates the designated column using the given Reader object.
void 	updateClob(String columnLabel, Reader reader, long length)
Updates the designated column using the given Reader object, which is the given number of characters long.
void 	updateDate(int columnIndex, Date x)
Updates the designated column with a java.sql.Date value.
void 	updateDate(String columnLabel, Date x)
Updates the designated column with a java.sql.Date value.
void 	updateDouble(int columnIndex, double x)
Updates the designated column with a double value.
void 	updateDouble(String columnLabel, double x)
Updates the designated column with a double value.
void 	updateFloat(int columnIndex, float x)
Updates the designated column with a float value.
void 	updateFloat(String columnLabel, float x)
Updates the designated column with a float value.
void 	updateInt(int columnIndex, int x)
Updates the designated column with an int value.
void 	updateInt(String columnLabel, int x)
Updates the designated column with an int value.
void 	updateLong(int columnIndex, long x)
Updates the designated column with a long value.
void 	updateLong(String columnLabel, long x)
Updates the designated column with a long value.
void 	updateNCharacterStream(int columnIndex, Reader x)
Updates the designated column with a character stream value.
void 	updateNCharacterStream(int columnIndex, Reader x, long length)
Updates the designated column with a character stream value, which will have the specified number of bytes.
void 	updateNCharacterStream(String columnLabel, Reader reader)
Updates the designated column with a character stream value.
void 	updateNCharacterStream(String columnLabel, Reader reader, long length)
Updates the designated column with a character stream value, which will have the specified number of bytes.
void 	updateNClob(int columnIndex, NClob nClob)
Updates the designated column with a java.sql.NClob value.
void 	updateNClob(int columnIndex, Reader reader)
Updates the designated column using the given Reader The data will be read from the stream as needed until end-of-stream is reached.
void 	updateNClob(int columnIndex, Reader reader, long length)
Updates the designated column using the given Reader object, which is the given number of characters long.
void 	updateNClob(String columnLabel, NClob nClob)
Updates the designated column with a java.sql.NClob value.
void 	updateNClob(String columnLabel, Reader reader)
Updates the designated column using the given Reader object.
void 	updateNClob(String columnLabel, Reader reader, long length)
Updates the designated column using the given Reader object, which is the given number of characters long.
void 	updateNString(int columnIndex, String nString)
Updates the designated column with a String value.
void 	updateNString(String columnLabel, String nString)
Updates the designated column with a String value.
void 	updateNull(int columnIndex)
Updates the designated column with a null value.
void 	updateNull(String columnLabel)
Updates the designated column with a null value.
void 	updateObject(int columnIndex, Object x)
Updates the designated column with an Object value.
void 	updateObject(int columnIndex, Object x, int scaleOrLength)
Updates the designated column with an Object value.
void 	updateObject(String columnLabel, Object x)
Updates the designated column with an Object value.
void 	updateObject(String columnLabel, Object x, int scaleOrLength)
Updates the designated column with an Object value.
void 	updateRef(int columnIndex, Ref x)
Updates the designated column with a java.sql.Ref value.
void 	updateRef(String columnLabel, Ref x)
Updates the designated column with a java.sql.Ref value.
void 	updateRow()
Updates the underlying database with the new contents of the current row of this ResultSet object.
void 	updateRowId(int columnIndex, RowId x)
Updates the designated column with a RowId value.
void 	updateRowId(String columnLabel, RowId x)
Updates the designated column with a RowId value.
void 	updateShort(int columnIndex, short x)
Updates the designated column with a short value.
void 	updateShort(String columnLabel, short x)
Updates the designated column with a short value.
void 	updateSQLXML(int columnIndex, SQLXML xmlObject)
Updates the designated column with a java.sql.SQLXML value.
void 	updateSQLXML(String columnLabel, SQLXML xmlObject)
Updates the designated column with a java.sql.SQLXML value.
void 	updateString(int columnIndex, String x)
Updates the designated column with a String value.
void 	updateString(String columnLabel, String x)
Updates the designated column with a String value.
void 	updateTime(int columnIndex, Time x)
Updates the designated column with a java.sql.Time value.
void 	updateTime(String columnLabel, Time x)
Updates the designated column with a java.sql.Time value.
void 	updateTimestamp(int columnIndex, Timestamp x)
Updates the designated column with a java.sql.Timestamp value.
void 	updateTimestamp(String columnLabel, Timestamp x)
Updates the designated column with a java.sql.Timestamp value.
boolean 	wasNull()
Reports whether the last column read had a value of SQL NULL.	

--------------------
/*ResultSet Interface Example : ResultSet objects: by default "CONCUR_READ_ONLY" & "TYPE_FORWARD_ONLY" */
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.Statement;

public class ResultSetExampleByDefault {
	public static void main(String[] args) { 

		Connection conn=null;
		Statement stmt  =null;
		ResultSet rs_1 = null;
		try{
			Class.forName("com.mysql.jdbc.Driver");
			conn=(Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/test","root","root");
			stmt=(Statement) conn.createStatement();
			
			/*Selection Query*/
			rs_1=(ResultSet)stmt.executeQuery("SELECT * FROM EMPLOYEE");
			while(rs_1.next()){
				/*fetching records with columnIndex*/
				System.out.println(rs_1.getInt(1)+"  :  "+rs_1.getString(2));
				/*fetching records with columnLabel*/
				System.out.println(rs_1.getInt("Sno")+"  :  "+rs_1.getString("first_name"));
			}

		}catch(ClassNotFoundException cnfe){
			System.out.println(cnfe.getMessage());
		}catch(SQLException sqle){
			System.out.println(sqle.getMessage());
		}finally {
			try {
				if(rs_1!=null)
					rs_1.close();
				if(stmt!=null)
					stmt.close();
				if(conn!=null)
					conn.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
	}

}



/*ResultSet Interface Example : ResultSet objects: Forward, Backward directions */
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.Statement;

public class ResultSetExampleForwardBackword {
	public static void main(String[] args) { 

		Connection conn=null;
		Statement stmt  =null;
		ResultSet rs_1 = null;
		try{
			Class.forName("com.mysql.jdbc.Driver");
			conn=(Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/test","root","root");
			stmt=(Statement) conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
			
			/*Selection Query*/
			rs_1=(ResultSet)stmt.executeQuery("SELECT * FROM EMPLOYEE");
			/*Display ResultSet data in forward direction*/
			while(rs_1.next()){
				/*fetching records with columnIndex*/
				System.out.println(rs_1.getInt(1)+"  :  "+rs_1.getString(2));
				/*fetching records with columnLabel*/
				System.out.println(rs_1.getInt("Sno")+"  :  "+rs_1.getString("first_name"));
			}

			/*Display ResultSet data in backward direction*/
			while(rs_1.previous()){
				/*fetching records with columnIndex*/
				System.out.println(rs_1.getInt(1)+"  :  "+rs_1.getString(2));
				/*fetching records with columnLabel*/
				System.out.println(rs_1.getInt("Sno")+"  :  "+rs_1.getString("first_name"));
			}
			
		}catch(ClassNotFoundException cnfe){
			System.out.println(cnfe.getMessage());
		}catch(SQLException sqle){
			System.out.println(sqle.getMessage());
		}finally {
			try {
				if(rs_1!=null)
					rs_1.close();
				if(stmt!=null)
					stmt.close();
				if(conn!=null)
					conn.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
	}
}


--------------------
