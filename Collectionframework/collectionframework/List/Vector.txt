Vector Class:
The Vector class implements a growable array of objects.
Like an array, it contains components that can be accessed using an integer index.
However, the size of a Vector can grow or shrink as needed to accommodate adding and removing items after the Vector has been created. 

Vector is similar to ArrayList but with some differences:
1: Vector is synchronized. If a thread-safe implementation is not needed, it is recommended to use ArrayList in place of Vector.
2: Vector contains many legacy methods that are n't part of the collection framework.
3: In case of single thread ArrayList is fast. In case of multi-thread vector is advisable.
4: ArrayList increases it size every time by 50%.Vector increases it's size every time by doubling it.

The iterators returned by Vector class's iterator and listIterator methods are fail-fast.

Constructors Of Vector Class:
Vector()
Constructs an empty vector so that its internal data array has size 10 and its standard capacity increment is zero.
Vector(Collection<? extends E> c)
Constructs a vector containing the elements of the specified collection, in the order they are returned by the collection's iterator.
Vector(int initialCapacity)
Constructs an empty vector with the specified initial capacity and with its capacity increment equal to zero.
Vector(int initialCapacity, int capacityIncrement)
Constructs an empty vector with the specified initial capacity and capacity increment.

Methods Of Vector Class:
boolean 	add(E e)
Appends the specified element to the end of this Vector.
void 	add(int index, E element)
Inserts the specified element at the specified position in this Vector.
boolean 	addAll(Collection<? extends E> c)
Appends all of the elements in the specified Collection to the end of this Vector, in the order that they are returned by the specified Collection's Iterator.
boolean 	addAll(int index, Collection<? extends E> c)
Inserts all of the elements in the specified Collection into this Vector at the specified position.
void 	addElement(E obj)
Adds the specified component to the end of this vector, increasing its size by one.
int 	capacity()
Returns the current capacity of this vector.
void 	clear()
Removes all of the elements from this Vector.
Object 	clone()
Returns a clone of this vector.
boolean 	contains(Object o)
Returns true if this vector contains the specified element.
boolean 	containsAll(Collection<?> c)
Returns true if this Vector contains all of the elements in the specified Collection.
void 	copyInto(Object[] anArray)
Copies the components of this vector into the specified array.
E 	elementAt(int index)
Returns the component at the specified index.
Enumeration<E> 	elements()
Returns an enumeration of the components of this vector.
void 	ensureCapacity(int minCapacity)
Increases the capacity of this vector, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument.
boolean 	equals(Object o)
Compares the specified Object with this Vector for equality.
E 	firstElement()
Returns the first component (the item at index 0) of this vector.
E 	get(int index)
Returns the element at the specified position in this Vector.
int 	hashCode()
Returns the hash code value for this Vector.
int 	indexOf(Object o)
Returns the index of the first occurrence of the specified element in this vector, or -1 if this vector does not contain the element.
int 	indexOf(Object o, int index)
Returns the index of the first occurrence of the specified element in this vector, searching forwards from index, or returns -1 if the element is not found.
void 	insertElementAt(E obj, int index)
Inserts the specified object as a component in this vector at the specified index.
boolean 	isEmpty()
Tests if this vector has no components.
Iterator<E> 	iterator()
Returns an iterator over the elements in this list in proper sequence.
E 	lastElement()
Returns the last component of the vector.
int 	lastIndexOf(Object o)
Returns the index of the last occurrence of the specified element in this vector, or -1 if this vector does not contain the element.
int 	lastIndexOf(Object o, int index)
Returns the index of the last occurrence of the specified element in this vector, searching backwards from index, or returns -1 if the element is not found.
ListIterator<E> 	listIterator()
Returns a list iterator over the elements in this list (in proper sequence).
ListIterator<E> 	listIterator(int index)
Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list.
E 	remove(int index)
Removes the element at the specified position in this Vector.
boolean 	remove(Object o)
Removes the first occurrence of the specified element in this Vector If the Vector does not contain the element, it is unchanged.
boolean 	removeAll(Collection<?> c)
Removes from this Vector all of its elements that are contained in the specified Collection.
void 	removeAllElements()
Removes all components from this vector and sets its size to zero.
boolean 	removeElement(Object obj)
Removes the first (lowest-indexed) occurrence of the argument from this vector.
void 	removeElementAt(int index)
Deletes the component at the specified index.
protected void 	removeRange(int fromIndex, int toIndex)
Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive.
boolean 	retainAll(Collection<?> c)
Retains only the elements in this Vector that are contained in the specified Collection.
E 	set(int index, E element)
Replaces the element at the specified position in this Vector with the specified element.
void 	setElementAt(E obj, int index)
Sets the component at the specified index of this vector to be the specified object.
void 	setSize(int newSize)
Sets the size of this vector.
int 	size()
Returns the number of components in this vector.
List<E> 	subList(int fromIndex, int toIndex)
Returns a view of the portion of this List between fromIndex, inclusive, and toIndex, exclusive.
Object[] 	toArray()
Returns an array containing all of the elements in this Vector in the correct order.
<T> T[] 	toArray(T[] a)
Returns an array containing all of the elements in this Vector in the correct order; the runtime type of the returned array is that of the specified array.
String 	toString()
Returns a string representation of this Vector, containing the String representation of each element.
void 	trimToSize()
Trims the capacity of this vector to be the vector's current size.


-------------------------------------
/*Vector Example */
import java.util.Enumeration;
import java.util.List;
import java.util.Vector;

public class VectorExample {
	public static void main(String[] args) {
		Vector<String> vector = new Vector<String>();
		vector.add("A");
		vector.add("B");
		vector.add("C");
		
		Enumeration<String> e1 = t1.elements();
		while(e1.hasMoreElements())
		{
			System.out.println(e1.nextElement());
		}
		
	}

}


-------------------------------------
What is difference between ArrayList and Vector?
By default ArrayList methods are not synchronized.
By default Vector methods are synchronized.
ArrayList is not thread-safe(Multiple threads can access ArrayList simultaneously).
Vector is  thread-safe(At any point only one thread is allowed to operate on vector object at a time).
ArrayList increases it's size every time by half.
Vector increases it's size every time by doubling it.
ArrayList is introduced in 1.2 version.It is non-legacy.
Vector is introduced in 1.0 version. It is legacy class.


What is fail-fast?
A fail-fast system is nothing but immediately reporting any failure that is likely to lead to failure.
When a problem occures in iterating of collection, a fail-fast system fails immediately.
In java you can find this behaviour with iterators.
In case, your have called iterator on a collection object, any other thread tries
to modify the same collection object, then ConcurrentModificationExceptipon will be thrown.

