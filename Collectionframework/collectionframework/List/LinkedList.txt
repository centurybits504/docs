LinkedList Class:
A Linked list contains a group of elements in the nodes. Each nodes will have three fields - the data field contains data and the link
fields contain rerences to previous nand next nodes.

<image>node structure, node, alinkelist</image>

Linked list is very convenient to store data.
Inserting the elements into linkedlist and removing the elements from the linked list and removing the 
elements from the linked list id done quickly and takes the same amount of time.

  
LinkedList Class is the doubly-linkedlist implementation of the List and deque interface's.
LinkedList Class  extends AbstractSequentialList<E> and implements List<E>, Deque<E>, Clonable, Serializable.
LinkedList Class contains duplicates elements.
LinkedList Class maintains insertion order.
LinkedList allows permits null.
LinkedList is not synchronized, so if multiple thread's tries to modify LinkedList, we get ConcurrentModificationException.
LinkedList don't have random accessing of elements.
In LinkedList collection manipulation of elements is fast, because of no-shifting needs to be occured.
LinkedList Class can be used as List, Stack, Queue.



Constructors Of LinkedList:
LinkedList()
Constructs an empty list.
LinkedList(Collection<? extends E> c)
Constructs a list containing the elements of the specified collection, in the order they are returned by the collection's iterator.

Methods Of LinkedList:
boolean 	add(E e)
Appends the specified element to the end of this list.
void 	add(int index, E element)
Inserts the specified element at the specified position in this list.
boolean 	addAll(Collection<? extends E> c)
Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.
boolean 	addAll(int index, Collection<? extends E> c)
Inserts all of the elements in the specified collection into this list, starting at the specified position.
void 	addFirst(E e)
Inserts the specified element at the beginning of this list.
void 	addLast(E e)
Appends the specified element to the end of this list.
void 	clear()
Removes all of the elements from this list.
Object 	clone()
Returns a shallow copy of this LinkedList.
boolean 	contains(Object o)
Returns true if this list contains the specified element.
Iterator<E> 	descendingIterator()
Returns an iterator over the elements in this deque in reverse sequential order.
E 	element()
Retrieves, but does not remove, the head (first element) of this list.
E 	get(int index)
Returns the element at the specified position in this list.
E 	getFirst()
Returns the first element in this list.
E 	getLast()
Returns the last element in this list.
int 	indexOf(Object o)
Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.
int 	lastIndexOf(Object o)
Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.
ListIterator<E> 	listIterator(int index)
Returns a list-iterator of the elements in this list (in proper sequence), starting at the specified position in the list.
boolean 	offer(E e)
Adds the specified element as the tail (last element) of this list.
boolean 	offerFirst(E e)
Inserts the specified element at the front of this list.
boolean 	offerLast(E e)
Inserts the specified element at the end of this list.
E 	peek()
Retrieves, but does not remove, the head (first element) of this list.
E 	peekFirst()
Retrieves, but does not remove, the first element of this list, or returns null if this list is empty.
E 	peekLast()
Retrieves, but does not remove, the last element of this list, or returns null if this list is empty.
E 	poll()
Retrieves and removes the head (first element) of this list.
E 	pollFirst()
Retrieves and removes the first element of this list, or returns null if this list is empty.
E 	pollLast()
Retrieves and removes the last element of this list, or returns null if this list is empty.
E 	pop()
Pops an element from the stack represented by this list.
void 	push(E e)
Pushes an element onto the stack represented by this list.
E 	remove()
Retrieves and removes the head (first element) of this list.
E 	remove(int index)
Removes the element at the specified position in this list.
boolean 	remove(Object o)
Removes the first occurrence of the specified element from this list, if it is present.
E 	removeFirst()
Removes and returns the first element from this list.
boolean 	removeFirstOccurrence(Object o)
Removes the first occurrence of the specified element in this list (when traversing the list from head to tail).
E 	removeLast()
Removes and returns the last element from this list.
boolean 	removeLastOccurrence(Object o)
Removes the last occurrence of the specified element in this list (when traversing the list from head to tail).
E 	set(int index, E element)
Replaces the element at the specified position in this list with the specified element.
int 	size()
Returns the number of elements in this list.
Object[] 	toArray()
Returns an array containing all of the elements in this list in proper sequence (from first to last element).
<T> T[] 	toArray(T[] a)
Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.


Ways to synchronize ArrayList:
LinkedList lnList = new LinkedList();
List synList = Collections.synchronizedList(lnList);

We can also use ConcurrentLinkedQueue (or) LinkedBlockingDeque, they are thread safe but slightly different behavior than LinkedList.
	
------------------------

/*Generic version of LinkedList Class*/
import java.util.*;  
public class Vehical{  
 public static void main(String args[]){  
  List<String> list=new LinkedList<String>();  
  list.add("Bus");  
  list.add("Bike");  
  list.add("Car");  

  Iterator<String> itr=list.iterator();  
  while(itr.hasNext()){  
   System.out.println(itr.next());  
  }
}  

/*Synchronized LinkedList Example*/
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class Vehical {
	public static void main(String a[]){
       LinkedList<String> lnList = 
         Collections.synchronizedList(new LinkedList<String>());
		lnList.add("Bus");
		lnList.add("Bike");
		lnList.add("Car");
/*iterator should be in synchronized block in this type of synchronization*/
       synchronized(lnList) {
       Iterator<String> iterator = lnList.iterator(); 
       while (iterator.hasNext()){
          System.out.println(iterator.next());
		  }
       }
   }
}

---------------------------
