
NavigableMap Interface:
NavigableMap is introduced in java 1.6 version.
NavigableMap is the child interface of SortedMap interface.
NavigableMap defines several methods for navigation purpose.
All Superinterfaces:
    Map<K,V>, SortedMap<K,V> 
All Known Implementing Classes:
    ConcurrentSkipListMap, TreeMap 

Methods Of NavigableMap Interface:
Map.Entry<K,V> 	ceilingEntry(K key)
Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such key.
K 	ceilingKey(K key)
Returns the least key greater than or equal to the given key, or null if there is no such key.
NavigableSet<K> 	descendingKeySet()
Returns a reverse order NavigableSet view of the keys contained in this map.
NavigableMap<K,V> 	descendingMap()
Returns a reverse order view of the mappings contained in this map.
Map.Entry<K,V> 	firstEntry()
Returns a key-value mapping associated with the least key in this map, or null if the map is empty.
Map.Entry<K,V> 	floorEntry(K key)
Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key.
K 	floorKey(K key)
Returns the greatest key less than or equal to the given key, or null if there is no such key.
SortedMap<K,V> 	headMap(K toKey)
Returns a view of the portion of this map whose keys are strictly less than toKey.
NavigableMap<K,V> 	headMap(K toKey, boolean inclusive)
Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey.
Map.Entry<K,V> 	higherEntry(K key)
Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key.
K 	higherKey(K key)
Returns the least key strictly greater than the given key, or null if there is no such key.
Map.Entry<K,V> 	lastEntry()
Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.
Map.Entry<K,V> 	lowerEntry(K key)
Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key.
K 	lowerKey(K key)
Returns the greatest key strictly less than the given key, or null if there is no such key.
NavigableSet<K> 	navigableKeySet()
Returns a NavigableSet view of the keys contained in this map.
Map.Entry<K,V> 	pollFirstEntry()
Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty.
Map.Entry<K,V> 	pollLastEntry()
Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.
NavigableMap<K,V> 	subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)
Returns a view of the portion of this map whose keys range from fromKey to toKey.
SortedMap<K,V> 	subMap(K fromKey, K toKey)
Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive.
SortedMap<K,V> 	tailMap(K fromKey)
Returns a view of the portion of this map whose keys are greater than or equal to fromKey.
NavigableMap<K,V> 	tailMap(K fromKey, boolean inclusive)
Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey.	

------------
/*NavigableMap interface Example*/
import java.util.NavigableMap;
import java.util.TreeMap;
public class NavigableMapExample {
	public static void main(String[] args) {
		NavigableMap<String,Integer> navigableMap=new TreeMap<String, Integer>();
		navigableMap.put("A", 100);
		navigableMap.put("B", 300);
		navigableMap.put("E", 200);
		navigableMap.put("F", 400);
		navigableMap.put("C", 600);
		navigableMap.put("D", 500);

		System.out.printf("DESCENDING",navigableMap.descendingKeySet());
		System.out.printf("FIRST ENTRY  : %s%n",navigableMap.firstEntry());
		System.out.printf("LAST KEY : %s%n",navigableMap.lastKey());
		System.out.printf("FIRST KEY : %s%n",navigableMap.firstKey());
		System.out.printf("REVERSE MAP : %s%n",navigableMap.descendingMap());
		System.out.printf("FLOOR ENTRY  : %s%n",navigableMap.floorEntry("L"));
	}
}

------------