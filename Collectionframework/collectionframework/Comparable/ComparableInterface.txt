Comparable Interface:
Comparable interface is present in java.lang.* package.
Comparable interface is used for "only natural sorting order" of collection elements(Example 1).
Natural Sorting Order means (ascending order) - A,B,C,D......etc (or) 1,2,3,4.......etc
All Known Subinterfaces: Delayed, Name, Path, RunnableScheduledFuture<V>, ScheduledFuture<V> 
All Known Implementing Classes: All Wrapper Classes,Calender, Enum, File, Date, Time, TimeStamp, ByteBuffer etc.
Comparable provides single sorting sequence i.e, you can sort the elements based on single data members only.

Methods Of Comparable Interface:
int 	compareTo(T obj)
Compares this object with the specified object for order.
Explanation:
	Compares current object with the specified object for ordering. 
	Returns a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object respectively. 
	This method throws NullPointerException - if the specified object(Here obj) is null.
	ClassCastException - if the specified object's type prevents it from being compared to this object(Here obj).

Sorting User-defined Class Object's:(Example 2:)	
Class whose objects to be sorted must implement Comparable interface.
If any class implements Comparable interface then collection of the object's of that class can be sorted automatically using Collections.sort()
(or) Arrays.sort() method's.
Object's will be compared on the basis of compareTo() method of Comparable interface in implementation class.
Sorting logic must be inthe same class whose objects are being sorted.

---------------
/*Example 1:- Sorting List elements of different types*/
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class ComparableNaturalSortingOrderExample {
	public static void main(String[] args) {
		 List<String> _stringList = new ArrayList<String>();
		 _stringList.add("A");
		 _stringList.add("C");
		 _stringList.add("B");
		 /*Here Collection is List and type of the collection elements is String.
		  String class implements the Comparable interface. So String objects can be comparable by-default.
		  */
		 /*Here sort():  Sorts the specified list into ascending order, according to the natural ordering of its elements.*/
		 Collections.sort(_stringList);
		 System.out.println(_stringList);
		 
		 List<Integer> _integerList = new ArrayList<>();
		 _integerList.add(1);
		 _integerList.add(3);
		 _integerList.add(2);
		 
		 /*Here Collection is List and type of the collection elements is Integer.
		  Integer class implements the Comparable interface. So Integer objects can be comparable by-default.
		  */
		 Collections.sort(_integerList);
		 System.out.println(_integerList);
		 
	}
}

/*Example 2:- Sorting Custom Class Object's  Using Comparable Interface*/
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
/*Custom Class Object Sorting Using Comparable Interface*/
/*Person class must implements the Comparable interface for Sorting  it's objects.*/
class Person  implements Comparable<Person>
{
	Integer empId;
	String empName;
	public Person(int empId,String empName){
		this.empId = empId;
		this.empName = empName;
	}
	@Override
	public int compareTo(Person obj) {

		/*this code is for comparing String's */
		Person st=(Person)obj;
		/*this compareTo() from String class*/
		return empName.compareTo(st.empName);
		
		/*this code is for comparing Integer's */
		/*Person st=(Person)obj;  
		if(empId==st.empId)  
		return 0;  
		else if(empId>st.empId)  
		return 1;  
		else  
		return -1;  
		*/
	}
} 
public class SortingComparablePersonObjectsExample {
	public static void main(String[] args) {
 
		/*this code is for comparing String's */
		List<Person> _list2=new ArrayList<Person>();
		_list2.add(new Person(10,"BB"));
		_list2.add(new Person(20,"AA"));
		Collections.sort(_list2);
		System.out.println("AFTER SORTING: Name -- Id\n");
		for(Object obj:_list2){
			System.out.println(((Person)obj).empName    +" -- "+ ((Person)obj).empId);
		}
		
		/*this code is for comparing Integer's */
		/*List<Person> _list1=new ArrayList<Person>();
		_list1.add(new Person(20,"A"));
		_list1.add(new Person(10,"B"));
		Collections.sort(_list1);
		System.out.println("AFTER SORTING: Name -- Id");
		for(Object obj:_list1){
			System.out.println(((Person)obj).empId   +" -- "+ ((Person)obj).empName);
		}
		*/			
	}
}

-------------------
	

	
	
	
	
	

